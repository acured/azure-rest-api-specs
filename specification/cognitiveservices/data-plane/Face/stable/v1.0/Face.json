{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Face Client",
    "description": "This API is currently available in:\n* West US - westus.api.cognitive.microsoft.com\n* West US 2 - westus2.api.cognitive.microsoft.com\n* East US - eastus.api.cognitive.microsoft.com\n* East US 2 - eastus2.api.cognitive.microsoft.com\n* West Central US - westcentralus.api.cognitive.microsoft.com\n* South Central US - southcentralus.api.cognitive.microsoft.com\n* West Europe - westeurope.api.cognitive.microsoft.com\n* North Europe - northeurope.api.cognitive.microsoft.com\n* Southeast Asia - southeastasia.api.cognitive.microsoft.com\n* East Asia - eastasia.api.cognitive.microsoft.com\n* Australia East - australiaeast.api.cognitive.microsoft.com\n* Brazil South - brazilsouth.api.cognitive.microsoft.com\n* Canada Central - canadacentral.api.cognitive.microsoft.com\n* Central India - centralindia.api.cognitive.microsoft.com\n* UK South - uksouth.api.cognitive.microsoft.com\n* Japan East - japaneast.api.cognitive.microsoft.com\n* Central US - centralus.api.cognitive.microsoft.com\n* France Central - francecentral.api.cognitive.microsoft.com\n* Korea Central - koreacentral.api.cognitive.microsoft.com\n* Japan West - japanwest.api.cognitive.microsoft.com\n* North Central US - northcentralus.api.cognitive.microsoft.com\n"
  },
  "securityDefinitions": {
    "apim_key": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    }
  },
  "security": [
    {
      "apim_key": []
    }
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{Endpoint}/face/v1.0",
    "useSchemePrefix": false,
    "parameters": [
      {
        "$ref": "#/parameters/Endpoint"
      }
    ]
  },
  "paths": {
    "/findsimilars": {
      "post": {
        "description": "Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face list. faceId array contains the faces created by [Face - Detect](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), which will expire 24 hours after creation. A \"faceListId\" is created by [FaceList - Create](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b) containing persistedFaceIds that will not expire. And a \"largeFaceListId\" is created by [LargeFaceList - Create](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc) containing persistedFaceIds that will also not expire. Depending on the input the returned similar faces list contains faceIds or persistedFaceIds ranked by similarity.<br />\nFind similar has two working modes, \"matchPerson\" and \"matchFace\". \"matchPerson\" is the default mode that it tries to find faces of the same person as possible by using internal same-person thresholds. It is useful to find a known person's other photos. Note that an empty list will be returned if no faces pass the internal thresholds. \"matchFace\" mode ignores same-person thresholds and returns ranked similar faces anyway, even the similarity is low. It can be used in the cases like searching celebrity-looking faces. \n",
        "operationId": "Face_FindSimilar",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body for Find Similar.",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/FindSimilarRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of the most similar faces represented in faceId if the input parameter is faceIds or persistedFaceId if the input parameter is faceListId or largeFaceListId.",
            "schema": {
              "$ref": "#/definitions/SimilarFaces"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Find similar results example": {
            "$ref": "./examples/FindSimilar.json"
          }
        }
      }
    },
    "/group": {
      "post": {
        "description": "Divide candidate faces into groups based on face similarity. \n* The output is one or more disjointed face groups and a messyGroup. A face group contains faces that have similar looking, often of the same person. Face groups are ranked by group size, i.e. number of faces. Notice that faces belonging to a same person might be split into several groups in the result. \n* MessyGroup is a special face group containing faces that cannot find any similar counterpart face from original faces. The messyGroup will not appear in the result if all faces found their counterparts\n* Group API needs at least 2 candidate faces and 1000 at most. We suggest to try [Face - Verify](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a) when you only have 2 candidate faces.\n",
        "operationId": "Face_Group",
        "parameters": [
          {
            "name": "body",
            "description": "Request body for grouping.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/GroupRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns one or more groups of similar faces (rank by group size) and a messyGroup.",
            "schema": {
              "$ref": "#/definitions/GroupResult"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Group example": {
            "$ref": "./examples/Group.json"
          }
        }
      }
    },
    "/identify": {
      "post": {
        "description": "1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.<br />\nFor each face in the faceIds array, Face Identify will compute similarities between the query face and all the faces in the person group (given by personGroupId) or large person group (given by largePersonGroupId), and return candidate person(s) for that face ranked by similarity confidence. The person group/large person group should be trained to make it ready for identification. See more in [PersonGroup - Train](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) and [LargePersonGroup - Train](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4).<br />\nRemarks:\n* The algorithm allows more than one face to be identified independently at the same request, but no more than 10 faces.\n* Each person in the person group/large person group could have more than one face, but no more than 248 faces.\n* Higher face image quality means better identification precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n* Number of candidates returned is restricted by maxNumOfCandidatesReturned and confidenceThreshold. If no person is identified, the returned candidates will be an empty array.\n* Try [Face - Find Similar](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) when you need to find similar faces from a face list/large face list instead of a person group/large person group.\n",
        "operationId": "Face_Identify",
        "parameters": [
          {
            "name": "body",
            "description": "Request body for identify operation.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/IdentifyRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the identified candidate person(s) for each query face.",
            "schema": {
              "$ref": "#/definitions/IdentifyResults"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Identiy example": {
            "$ref": "./examples/Identify.json"
          }
        }
      }
    },
    "/verify": {
      "post": {
        "description": "Verify whether two faces belong to a same person or whether one face belongs to a person.<br />\nRemarks:\n* Higher face image quality means better identification precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n* For the scenarios that are sensitive to accuracy please make your own judgment.\n",
        "operationId": "Face_VerifyFaceToFace",
        "parameters": [
          {
            "name": "body",
            "description": "Request body for face to face verification.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/VerifyFaceToFaceRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the verification result.",
            "schema": {
              "$ref": "#/definitions/VerifyResult"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Verify faces example": {
            "$ref": "./examples/VerifyFaceToFace.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons": {
      "post": {
        "description": "Create a new person in a specified person group. To add face to this person, please call [PersonGroup PersonFace - Add](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b). \n* Free-tier subscription quota: \n  * 1,000 persons in all person groups.\n* S0-tier subscription quota: \n  * 10,000 persons per person group.\n  * 1,000,000 person groups.\n  * 100,000,000 persons in all person groups.\n",
        "operationId": "PersonGroupPerson_Create",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "name": "body",
            "description": "Request body for creating new person.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new personId created.",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create new person for person group example": {
            "$ref": "./examples/CreateNewPersonGroupPerson.json"
          }
        }
      },
      "get": {
        "description": "List all persons’ information in the specified person group, including personId, name, userData and persistedFaceIds of registered person faces.\n* Persons are stored in alphabetical order of personId created in [PersonGroup Person - Create](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c).\n* \"start\" parameter (string, optional) is a personId value that returned entries have larger ids by string comparison. \"start\" set to empty to indicate return from the first item.\n* \"top\" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify \"start\" with the last returned entry’s personId of the current call.\n\nFor example, total 5 persons with their personId: \"personId1\", ..., \"personId5\". \n\"start=&top=\" will return all 5 persons. \n\"start=&top=2\" will return \"personId1\", \"personId2\". \n\"start=personId2&top=3\" will return \"personId3\", \"personId4\", \"personId5\".\n",
        "operationId": "PersonGroupPerson_List",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "name": "start",
            "description": "List persons from the least personId greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "description": "The number of persons to list, ranging in [1, 1000]. Default is 1000.",
            "in": "query",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of person information that belong to the person group.",
            "schema": {
              "$ref": "#/definitions/Persons"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "List persons in person group": {
            "$ref": "./examples/ListPersonGroupPersons.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}": {
      "delete": {
        "description": "Delete an existing person from a person group. All stored person data, and face images in the person entry will be deleted.",
        "operationId": "PersonGroupPerson_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete an existing person example": {
            "$ref": "./examples/DeletePersonGroupPerson.json"
          }
        }
      },
      "get": {
        "description": "Retrieve a person's name and userData, and the persisted faceIds representing the registered person face image.",
        "operationId": "PersonGroupPerson_Get",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the person's information.",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get person example": {
            "$ref": "./examples/GetPersonGroupPerson.json"
          }
        }
      },
      "patch": {
        "description": "Update name or userData of a person.",
        "operationId": "PersonGroupPerson_Update",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "name": "body",
            "description": "Request body for person update operation.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update person example": {
            "$ref": "./examples/UpdatePersonGroupPerson.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}": {
      "delete": {
        "description": "Delete a face from a person in a person group. Face data and image related to this face entry will be also deleted. \nAdding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel. \n",
        "operationId": "PersonGroupPerson_DeleteFace",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete face from person example": {
            "$ref": "./examples/DeletePersonGroupPersonFace.json"
          }
        }
      },
      "get": {
        "description": "Retrieve person face information. The persisted person face is specified by its personGroupId, personId and persistedFaceId.",
        "operationId": "PersonGroupPerson_GetFace",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns target persisted face's information (persistedFaceId and userData).",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get persisted face example": {
            "$ref": "./examples/GetPersonGroupPersistedFace.json"
          }
        }
      },
      "patch": {
        "description": "Update a person persisted face's userData field.",
        "operationId": "PersonGroupPerson_UpdateFace",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          },
          {
            "name": "body",
            "description": "Request body for updating persisted face.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/UpdateFaceRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update person face example": {
            "$ref": "./examples/UpdatePersonGroupPersonFace.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}": {
      "put": {
        "description": "Create a new person group with specified personGroupId, name, and user-provided userData. \nA person group is the container of the uploaded person data, including face images and face recognition features. \nAfter creation, use [PersonGroup Person - Create](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c) to add persons into the group, and then call [PersonGroup - Train](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) to get this group ready for [Face - Identify](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239). \nThe person's face, image, and userData will be stored on server until [PersonGroup Person - Delete](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup - Delete](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called. \n* Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons.\n* S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons.\n* to handle larger scale face identification problem, please consider using [LargePersonGroup](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).\n",
        "operationId": "PersonGroup_Create",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "name": "body",
            "description": "Request body for creating new person group.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create new person group example": {
            "$ref": "./examples/CreateNewPersonGroup.json"
          }
        }
      },
      "delete": {
        "description": "Delete an existing person group with specified personGroupId. Persisted data in this person group will be deleted.",
        "operationId": "PersonGroup_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete a person group example": {
            "$ref": "./examples/DeletePersonGroup.json"
          }
        }
      },
      "get": {
        "description": "Retrieve person group name and userData. To get person information under this personGroup, use [PersonGroup Person - List](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).",
        "operationId": "PersonGroup_Get",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the person group's information.",
            "schema": {
              "$ref": "#/definitions/PersonGroup"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "Get person group example": {
            "$ref": "./examples/GetPersonGroup.json"
          }
        }
      },
      "patch": {
        "description": "Update an existing person group's name and userData. The properties keep unchanged if they are not in request body.",
        "operationId": "PersonGroup_Update",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "name": "body",
            "description": "Request body for updating person group.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update person group example": {
            "$ref": "./examples/UpdatePersonGroup.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/training": {
      "get": {
        "description": "To check person group training status completed or still ongoing. PersonGroup Training is an asynchronous operation triggered by [PersonGroup - Train](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) API.",
        "operationId": "PersonGroup_GetTrainingStatus",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the person group's training status.",
            "schema": {
              "$ref": "#/definitions/TrainingStatus"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "Get person group's training status example": {
            "$ref": "./examples/GetPersonGroupTrainingStatus.json"
          }
        }
      }
    },
    "/persongroups": {
      "get": {
        "description": "List person groups’s pesonGroupId, name, and userData.\n* Person groups are stored in alphabetical order of personGroupId.\n* \"start\" parameter (string, optional) is a user-provided personGroupId value that returned entries have larger ids by string comparison. \"start\" set to empty to indicate return from the first item.\n* \"top\" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify \"start\" with the last retuned entry’s Id of the current call.\n\nFor example, total 5 person groups: \"group1\", ..., \"group5\". \n\"start=&top=\" will return all 5 groups. \n\"start=&top=2\" will return \"group1\", \"group2\". \n\"start=group2&top=3\" will return \"group3\", \"group4\", \"group5\". \n",
        "operationId": "PersonGroup_List",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "List person groups from the least personGroupId greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "type": "string",
            "maxLength": 64
          },
          {
            "name": "top",
            "in": "query",
            "required": false,
            "description": "The number of person groups to list, ranging in [1, 1000]. Default is 1000.",
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "default": 1000
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of person groups and their information.",
            "schema": {
              "$ref": "#/definitions/PersonGroups"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "List person groups example": {
            "$ref": "./examples/ListPersonGroups.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/train": {
      "post": {
        "description": "Submit a person group training task. Training is a crucial step that only a trained person group can be used by [Face - Identify](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239). <br />\nThe training task is an asynchronous task. Training time depends on the number of person entries, and their faces in a person group. It could be several seconds to minutes. To check training status, please use [PersonGroup - Get Training Status](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395247).\n",
        "operationId": "PersonGroup_Train",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "A successful call returns an empty JSON body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Queue person group training": {
            "$ref": "./examples/QueuePersonGroupTraining.json"
          }
        }
      }
    },
    "/facelists/{faceListId}": {
      "put": {
        "description": "Create an empty face list with user-specified faceListId, name and an optional userData. Up to 64 face lists are allowed in one subscription. \nFace list is a list of faces, up to 1,000 faces, and used by [Face - Find Similar](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). \nAfter creation, user should use [FaceList - Add](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250) Face to import the faces. Faces are stored on server until [FaceList - Delete](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) is called. \nFind Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239). \nPlease consider [LargeFaceList](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc) when the face number is large. It can support up to 1,000,000 faces. \n",
        "operationId": "FaceList_Create",
        "parameters": [
          {
            "$ref": "#/parameters/faceListId"
          },
          {
            "name": "body",
            "description": "Request body for creating a face list.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create new face list example": {
            "$ref": "./examples/CreateNewFaceList.json"
          }
        }
      },
      "get": {
        "description": "Retrieve a face list’s faceListId, name, userData and faces in the face list.",
        "operationId": "FaceList_Get",
        "parameters": [
          {
            "$ref": "#/parameters/faceListId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the face list's information.",
            "schema": {
              "$ref": "#/definitions/FaceList"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get Face list example": {
            "$ref": "./examples/GetFaceList.json"
          }
        }
      },
      "patch": {
        "description": "Update information of a face list, including name and userData.",
        "operationId": "FaceList_Update",
        "parameters": [
          {
            "$ref": "#/parameters/faceListId"
          },
          {
            "name": "body",
            "description": "Request body for updating a face list.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update face list example": {
            "$ref": "./examples/UpdateFaceList.json"
          }
        }
      },
      "delete": {
        "description": "Delete a specified face list. The related face images in the face list will be deleted, too.",
        "operationId": "FaceList_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/faceListId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete face list example": {
            "$ref": "./examples/DeleteFaceList.json"
          }
        }
      }
    },
    "/facelists": {
      "get": {
        "description": "List face lists’ faceListId, name and userData. \nTo get face information inside faceList use [FaceList - Get](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524c). \n",
        "operationId": "FaceList_List",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful call returns an array of faceList.",
            "schema": {
              "$ref": "#/definitions/FaceLists"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "List Face lists example": {
            "$ref": "./examples/ListFaceLists.json"
          }
        }
      }
    },
    "/facelists/{faceListId}/persistedfaces/{persistedFaceId}": {
      "delete": {
        "description": "Delete a face from a face list by specified faceListId and persisitedFaceId. The related face image will be deleted, too. \nAdding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel. \n",
        "operationId": "FaceList_DeleteFace",
        "parameters": [
          {
            "$ref": "#/parameters/faceListId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete face in face list example": {
            "$ref": "./examples/DeleteFaceListFace.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}/persistedfaces": {
      "post": {
        "description": "Add a face image to a person into a person group for face identification or verification. To deal with the image of multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. The extracted face feature, instead of the actual image, will be stored on server until [PersonGroup PersonFace - Delete](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e), [PersonGroup Person - Delete](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup - Delete](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called. \nNote persistedFaceId is different from faceId generated by [Face - Detect](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).\n* Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n* Each person entry can hold up to 248 faces.\n* JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.\n* \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from [Face - Detect](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.\n* Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.\n* Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.\n",
        "operationId": "PersonGroupPerson_AddFaceFromUrl",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/faceUserData"
          },
          {
            "$ref": "#/parameters/targetFace"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageUrl"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Add Person face example": {
            "$ref": "./examples/AddPersonGroupPersonFaceFromUrl.json"
          }
        }
      }
    },
    "/detect": {
      "post": {
        "description": "Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes:\n  * Optional parameters including faceId, landmarks, and attributes. Attributes include age, gender, headPose, smile, facialHair, glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure and noise.\n  * faceId will be used in [Face - Identify](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239), [Face - Verify](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a), and [Face - Find Similar](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). It will expire 24 hours after the detection call.\n  * Higher face image quality means better detection and recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n  * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.\n  * Faces are detectable when its size is 36x36 to 4096x4096 pixels. If need to detect very small but clear faces, please try to enlarge the input image.\n  * Up to 64 faces can be returned for an image. Faces are ranked by face rectangle size from large to small.\n  * Face detector prefer frontal and near-frontal faces. There are cases that faces may not be detected, e.g. exceptionally large face angles (head-pose) or being occluded, or wrong image orientation.\n  * Attributes (age, gender, headPose, smile, facialHair, glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure and noise) may not be perfectly accurate. HeadPose's pitch value is a reserved field and will always return 0.\n",
        "operationId": "Face_DetectWithUrl",
        "parameters": [
          {
            "name": "returnFaceId",
            "in": "query",
            "description": "Return faceIds of the detected faces or not.",
            "type": "boolean",
            "default": true
          },
          {
            "name": "returnFaceLandmarks",
            "in": "query",
            "description": "Return face landmarks of the detected faces or not.",
            "type": "boolean",
            "default": false
          },
          {
            "$ref": "#/parameters/returnFaceAttributes"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageUrl"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of face entries ranked by face rectangle size in descending order. An empty response indicates no faces detected.",
            "schema": {
              "$ref": "#/definitions/DetectedFaces"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Detect with url example": {
            "$ref": "./examples/DetectWithUrl.json"
          }
        }
      }
    },
    "/facelists/{faceListId}/persistedfaces": {
      "post": {
        "description": "Add a face to a specified face list, up to 1,000 faces.\nTo deal with the image of multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. The extracted face feature, instead of the actual image, will be stored on server until [FaceList - Delete Face](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395251) or [FaceList - Delete](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) is called.\nNote persistedFaceId is different from faceId generated by [FaceList - Delete](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f).\n* Higher face image quality means better detection and recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n* JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.\n* \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from [FaceList - Delete](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f), there’s no guarantee to detect and add the face successfully.\n* Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.\n* Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.\n",
        "operationId": "FaceList_AddFaceFromUrl",
        "parameters": [
          {
            "$ref": "#/parameters/faceListId"
          },
          {
            "$ref": "#/parameters/faceUserData"
          },
          {
            "$ref": "#/parameters/targetFace"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageUrl"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create face list face example": {
            "$ref": "./examples/AddFaceListFaceFromUrl.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons": {
      "post": {
        "description": "Create a new person in a specified large person group. To add face to this person, please call [LargePersonGroup PersonFace - Add](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599adf2a3a7b9412a4d53f42). \n* Free-tier subscription quota: \n  * 1,000 persons in all large person groups.\n* S0-tier subscription quota: \n  * 1,000,000 persons per large person group.\n  * 1,000,000 large person groups.\n  * 1,000,000,000 persons in all large person groups.\n",
        "operationId": "LargePersonGroupPerson_Create",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "name": "body",
            "description": "Request body for creating new person.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new personId created.",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create new person for large person group example": {
            "$ref": "./examples/CreateNewLargePersonGroupPerson.json"
          }
        }
      },
      "get": {
        "description": "List all persons’ information in the specified large person group, including personId, name, userData and persistedFaceIds of registered person faces.\n* Persons are stored in alphabetical order of personId created in [LargePersonGroup Person - Create](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40).\n* \"start\" parameter (string, optional) is a personId value that returned entries have larger ids by string comparison. \"start\" set to empty to indicate return from the first item.\n* \"top\" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify \"start\" with the last returned entry’s personId of the current call.\n\nFor example, total 5 persons with their personId: \"personId1\", ..., \"personId5\". \n\"start=&top=\" will return all 5 persons. \n\"start=&top=2\" will return \"personId1\", \"personId2\". \n\"start=personId2&top=3\" will return \"personId3\", \"personId4\", \"personId5\". \n",
        "operationId": "LargePersonGroupPerson_List",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "name": "start",
            "description": "List persons from the least personId greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "description": "The number of persons to list, ranging in [1, 1000]. Default is 1000.",
            "in": "query",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of person information that belong to the large person group.",
            "schema": {
              "$ref": "#/definitions/Persons"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "List persons in person group": {
            "$ref": "./examples/ListLargePersonGroupPersons.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons/{personId}": {
      "delete": {
        "description": "Delete an existing person from a large person group. All stored person data, and face images in the person entry will be deleted.",
        "operationId": "LargePersonGroupPerson_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete an existing person example": {
            "$ref": "./examples/DeleteLargePersonGroupPerson.json"
          }
        }
      },
      "get": {
        "description": "Retrieve a person's name and userData, and the persisted faceIds representing the registered person face image.",
        "operationId": "LargePersonGroupPerson_Get",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the person's information.",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get person example": {
            "$ref": "./examples/GetLargePersonGroupPerson.json"
          }
        }
      },
      "patch": {
        "description": "Update name or userData of a person.",
        "operationId": "LargePersonGroupPerson_Update",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "name": "body",
            "description": "Request body for person update operation.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update person example": {
            "$ref": "./examples/UpdateLargePersonGroupPerson.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}": {
      "delete": {
        "description": "Delete a face from a person in a large person group. Face data and image related to this face entry will be also deleted. \nAdding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.\n",
        "operationId": "LargePersonGroupPerson_DeleteFace",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete face from person example": {
            "$ref": "./examples/DeleteLargePersonGroupPersonFace.json"
          }
        }
      },
      "get": {
        "description": "Retrieve person face information. The persisted person face is specified by its largePersonGroupId, personId and persistedFaceId.",
        "operationId": "LargePersonGroupPerson_GetFace",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns target persisted face's information (persistedFaceId and userData).",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get persisted face example": {
            "$ref": "./examples/GetLargePersonGroupPersistedFace.json"
          }
        }
      },
      "patch": {
        "description": "Update a person persisted face's userData field.",
        "operationId": "LargePersonGroupPerson_UpdateFace",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          },
          {
            "name": "body",
            "description": "Request body for updating persisted face.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/UpdateFaceRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update person face example": {
            "$ref": "./examples/UpdateLargePersonGroupPersonFace.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}": {
      "put": {
        "description": "Create a new large person group with user-specified largePersonGroupId, name, and optional userData. \nA large person group is the container of the uploaded person data, including face images and face recognition feature, and up to 1,000,000 people. \nAfter creation, use [LargePersonGroup Person - Create](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40) to add person into the group, and call [LargePersonGroup - Train](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4) to get this group ready for [Face - Identify](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239). \nThe person face, image, and userData will be stored on server until [LargePersonGroup Person - Delete](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599ade5c6ac60f11b48b5aa2) or [LargePersonGroup - Delete](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599adc216ac60f11b48b5a9f) is called. \n* Free-tier subscription quota: 1,000 large person groups.\n* S0-tier subscription quota: 1,000,000 large person groups.\n",
        "operationId": "LargePersonGroup_Create",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "name": "body",
            "description": "Request body for creating new large person group.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create new large person group example": {
            "$ref": "./examples/CreateNewLargePersonGroup.json"
          }
        }
      },
      "delete": {
        "description": "Delete an existing large person group with specified personGroupId. Persisted data in this large person group will be deleted.",
        "operationId": "LargePersonGroup_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete a large person group example": {
            "$ref": "./examples/DeleteLargePersonGroup.json"
          }
        }
      },
      "get": {
        "description": "Retrieve the information of a large person group, including its name and userData. This API returns large person group information only, use [LargePersonGroup Person - List](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599adda06ac60f11b48b5aa1) instead to retrieve person information under the large person group.",
        "operationId": "LargePersonGroup_Get",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the large person group's information.",
            "schema": {
              "$ref": "#/definitions/LargePersonGroup"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "Get large person group example": {
            "$ref": "./examples/GetLargePersonGroup.json"
          }
        }
      },
      "patch": {
        "description": "Update an existing large person group's name and userData. The properties keep unchanged if they are not in request body.",
        "operationId": "LargePersonGroup_Update",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "name": "body",
            "description": "Request body for updating large person group.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update large person group example": {
            "$ref": "./examples/UpdateLargePersonGroup.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/training": {
      "get": {
        "description": "To check large person group training status completed or still ongoing. LargePersonGroup Training is an asynchronous operation triggered by [LargePersonGroup - Train](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4) API. \nTraining time depends on the number of person entries, and their faces in a large person group. It could be in seconds, or up to half an hour for 1,000,000 persons. \n",
        "operationId": "LargePersonGroup_GetTrainingStatus",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the large person group's training status.",
            "schema": {
              "$ref": "#/definitions/TrainingStatus"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "Get large person group's training status example": {
            "$ref": "./examples/GetLargePersonGroupTrainingStatus.json"
          }
        }
      }
    },
    "/largepersongroups": {
      "get": {
        "description": "List all existing large person groups’s largePesonGroupId, name, and userData.\n* Large person groups are stored in alphabetical order of largePersonGroupId.\n* \"start\" parameter (string, optional) is a user-provided largePersonGroupId value that returned entries have larger ids by string comparison. \"start\" set to empty to indicate return from the first item.\n* \"top\" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify \"start\" with the last retuned entry’s Id of the current call.\n\nFor example, total 5 large person groups: \"group1\", ..., \"group5\". \n\"start=&top=\" will return all 5 groups. \n\"start=&top=2\" will return \"group1\", \"group2\". \n\"start=group2&top=3\" will return \"group3\", \"group4\", \"group5\". \n",
        "operationId": "LargePersonGroup_List",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "List large person groups from the least largePersonGroupId greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "type": "string",
            "maxLength": 64
          },
          {
            "name": "top",
            "in": "query",
            "required": false,
            "description": "The number of large person groups to list, ranging in [1, 1000]. Default is 1000.",
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "default": 1000
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of large person groups and their information (largePersonGroupId, name and userData).",
            "schema": {
              "$ref": "#/definitions/LargePersonGroups"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "List large person groups example": {
            "$ref": "./examples/ListLargePersonGroups.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/train": {
      "post": {
        "description": "Submit a large person group training task. Training is a crucial step that only a trained large person group can be used by [Face - Identify](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239). \n\nThe training task is an asynchronous task. Training time depends on the number of person entries, and their faces in a large person group. It could be in several seconds, or up to half a hour for 1,000,000 persons. To check training completion, please use [LargePersonGroup - Get Training Status](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599ae32c6ac60f11b48b5aa5). \n",
        "operationId": "LargePersonGroup_Train",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "A successful call returns an empty JSON body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Queue large person group training": {
            "$ref": "./examples/QueueLargePersonGroupTraining.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces": {
      "post": {
        "description": "Add a face image to a person into a large person group for face identification or verification. To deal with the image of multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. The extracted face feature, instead of the actual image, will be stored on server until [LargePersonGroup PersonFace - Delete](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599ae2966ac60f11b48b5aa3), [LargePersonGroup Person - Delete](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599ade5c6ac60f11b48b5aa2) or [LargePersonGroup - Delete](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599adc216ac60f11b48b5a9f) is called. \nNote persistedFaceId is different from faceId generated by [Face - Detect](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).\n* Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n* Each person entry can hold up to 248 faces.\n* JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.\n* \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from [Face - Detect](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.\n* Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.\n* Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.\n",
        "operationId": "LargePersonGroupPerson_AddFaceFromUrl",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/faceUserData"
          },
          {
            "$ref": "#/parameters/targetFace"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageUrl"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Add Person face example": {
            "$ref": "./examples/AddLargePersonGroupPersonFaceFromUrl.json"
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}": {
      "put": {
        "description": "Create an empty large face list with user-specified largeFaceListId, name and an optional userData. \nLarge face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). \nAfter creation, user should use [LargeFaceList Face - Add](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and [LargeFaceList - Train](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make it ready for [Face - Find Similar](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). Faces are stored on server until [LargeFaceList - Delete](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called. \nFind Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239). \n* Free-tier subscription quota: 64 large face lists.\n* S0-tier subscription quota: 1,000,000 large face lists.\n",
        "operationId": "LargeFaceList_Create",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          },
          {
            "name": "body",
            "description": "Request body for creating a large face list.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create new large face list example": {
            "$ref": "./examples/CreateNewLargeFaceList.json"
          }
        }
      },
      "get": {
        "description": "Retrieve a large face list’s largeFaceListId, name, userData.",
        "operationId": "LargeFaceList_Get",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the large face list's information.",
            "schema": {
              "$ref": "#/definitions/LargeFaceList"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get large face list example": {
            "$ref": "./examples/GetLargeFaceList.json"
          }
        }
      },
      "patch": {
        "description": "Update information of a large face list, including name and userData.",
        "operationId": "LargeFaceList_Update",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          },
          {
            "name": "body",
            "description": "Request body for updating a large face list.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update large face list example": {
            "$ref": "./examples/UpdateLargeFaceList.json"
          }
        }
      },
      "delete": {
        "description": "Delete a specified large face list. The related face images in the large face list will be deleted, too.",
        "operationId": "LargeFaceList_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete large face list example": {
            "$ref": "./examples/DeleteLargeFaceList.json"
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}/training": {
      "get": {
        "description": "To check the large face list training status completed or still ongoing. LargeFaceList Training is an asynchronous operation triggered by [LargeFaceList - Train](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) API. \n\nTraining time depends on the number of face entries in a large face list. It could be in seconds, or up to half an hour for 1,000,000 faces. \n",
        "operationId": "LargeFaceList_GetTrainingStatus",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the large face list's training status.",
            "schema": {
              "$ref": "#/definitions/TrainingStatus"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "Get large face list's training status example": {
            "$ref": "./examples/GetLargeFaceListTrainingStatus.json"
          }
        }
      }
    },
    "/largefacelists": {
      "get": {
        "description": "List large face lists’ information of largeFaceListId, name and userData. \nTo get face information inside largeFaceList use [LargeFaceList Face - Get](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5).\n* Large face lists are stored in alphabetical order of largeFaceListId.\n* \"start\" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. \"start\" set to empty to indicate return from the first item.\n* \"top\" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify \"start\" with the last retuned entry’s Id of the current call.\n\nFor example, total 5 large person lists: \"list1\", ..., \"list5\". \n\"start=&top=\" will return all 5 lists. \n\"start=&top=2\" will return \"list1\", \"list2\". \n\"start=list2&top=3\" will return \"list3\", \"list4\", \"list5\". \n",
        "operationId": "LargeFaceList_List",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "List large face lists from the least largeFaceListId greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "type": "string",
            "maxLength": 64
          },
          {
            "name": "top",
            "in": "query",
            "required": false,
            "description": "The number of large face lists to list, ranging in [1, 1000]. Default is 1000.",
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of largeFaceList.",
            "schema": {
              "$ref": "#/definitions/LargeFaceLists"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "List large face lists example": {
            "$ref": "./examples/ListLargeFaceLists.json"
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}/train": {
      "post": {
        "description": "Submit a large face list training task. Training is a crucial step that only a trained large face list can be used by [Face - Find Similar](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).<br />\nThe training task is an asynchronous task. Training time depends on the number of face entries in a large face list. It could be in seconds, or up to half an hour for 1,000,000 faces. To check training completion, please use [LargeFaceList - Get Training Status](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/5a1582f8d2de3616c086f2cf). \n",
        "operationId": "LargeFaceList_Train",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Queue large face list training": {
            "$ref": "./examples/QueueLargeFaceListTraining.json"
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}": {
      "delete": {
        "description": "Delete a face from a large face list by specified largeFaceListId and persisitedFaceId. The related face image will be deleted, too.\nAdding/deleting faces to/from a same large face list are processed sequentially and to/from different large face lists are in parallel.",
        "operationId": "LargeFaceList_DeleteFace",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete face in large face list example": {
            "$ref": "./examples/DeleteLargeFaceListFace.json"
          }
        }
      },
      "get": {
        "description": "Retrieve persisted face in large face list by largeFaceListId and persistedFaceId.",
        "operationId": "LargeFaceList_GetFace",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns target persisted face's information (persistedFaceId and userData).",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get persisted face example": {
            "$ref": "./examples/GetLargeFaceListPersistedFace.json"
          }
        }
      },
      "patch": {
        "description": "Update a specified face's userData field in a large face list by its persistedFaceId.",
        "operationId": "LargeFaceList_UpdateFace",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          },
          {
            "name": "body",
            "description": "User-specified data about the target face to add for any purpose. The maximum length is 1KB.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/UpdateFaceRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update face example": {
            "$ref": "./examples/UpdateLargeFaceListFace.json"
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}/persistedfaces": {
      "post": {
        "description": "Add a face to a specified large face list, up to 1,000,000 faces. \nTo deal with the image of multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. The extracted face feature, instead of the actual image, will be stored on server until [LargeFaceList Face - Delete](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/5a158c8ad2de3616c086f2d4) or [LargeFaceList - Delete](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.\nNote persistedFaceId is different from faceId generated by [Face - Detect](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).\n  * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n  * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.\n  * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from [Face - Detect](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.\n  * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.\n  * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.\n  \nQuota: \n  * Free-tier subscription quota: 1,000 faces per large face list.\n  * S0-tier subscription quota: 1,000,000 faces per large face list.\n",
        "operationId": "LargeFaceList_AddFaceFromUrl",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          },
          {
            "$ref": "#/parameters/faceUserData"
          },
          {
            "$ref": "#/parameters/targetFace"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageUrl"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create large face list face example": {
            "$ref": "./examples/AddLargeFaceListFaceFromUrl.json"
          }
        }
      },
      "get": {
        "description": "List faces' persistedFaceId and userData in a specified large face list.\n* Faces are stored in alphabetical order of persistedFaceId created in [LargeFaceList Face - Add](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3).\n* \"start\" parameter (string, optional) is a persistedFaceId value that returned entries have larger ids by string comparison. \"start\" set to empty to indicate return from the first item.\n* \"top\" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify \"start\" with the last returned entry’s persistedFaceId of the current call.\n\nFor example, total 5 persons with their face: \"face1\", ..., \"face5\". \n\"start=&top=\" will return all 5 persons. \n\"start=&top=2\" will return \"face1\", \"face2\". \n\"start=face2&top=3\" will return \"face3\", \"face4\", \"face5\". \n",
        "operationId": "LargeFaceList_ListFaces",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          },
          {
            "name": "start",
            "description": "List large face list faces from the least persistedFaceId greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "description": "The number of large face list faces to list, ranging in [1, 1000]. Default is 1000.",
            "in": "query",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of persisted faces and their information (persistedFaceId and userData).",
            "schema": {
              "$ref": "#/definitions/PersistedFaces"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "List faces in large face list": {
            "$ref": "./examples/ListLargeFaceListFaces.json"
          }
        }
      }
    }
  },
  "x-ms-paths": {
    "/verify?overload=person": {
      "post": {
        "description": "Verify whether two faces belong to a same person. Compares a face Id with a Person Id",
        "operationId": "Face_VerifyFaceToPerson",
        "parameters": [
          {
            "name": "body",
            "description": "Request body for face to person verification.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/VerifyFaceToPersonRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the verification result.",
            "schema": {
              "$ref": "#/definitions/VerifyResult"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Verify face to person example": {
            "$ref": "./examples/VerifyFaceToPerson.json"
          }
        }
      }
    },
    "/detect?overload=stream": {
      "post": {
        "description": "Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.",
        "operationId": "Face_DetectWithStream",
        "parameters": [
          {
            "name": "returnFaceId",
            "in": "query",
            "description": "A value indicating whether the operation should return faceIds of detected faces.",
            "type": "boolean",
            "default": true
          },
          {
            "name": "returnFaceLandmarks",
            "in": "query",
            "description": "A value indicating whether the operation should return landmarks of the detected faces.",
            "type": "boolean",
            "default": false
          },
          {
            "$ref": "#/parameters/returnFaceAttributes"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageStream"
          }
        ],
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of face entries ranked by face rectangle size in descending order. An empty response indicates no faces detected.",
            "schema": {
              "$ref": "#/definitions/DetectedFaces"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Detect with stream example": {
            "$ref": "./examples/DetectWithStream.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}/persistedfaces?overload=stream": {
      "post": {
        "description": "Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.",
        "operationId": "PersonGroupPerson_AddFaceFromStream",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/faceUserData"
          },
          {
            "$ref": "#/parameters/targetFace"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageStream"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Add face to person with stream example": {
            "$ref": "./examples/AddPersonGroupPersonFaceFromStream.json"
          }
        }
      }
    },
    "/facelists/{faceListId}/persistedfaces?overload=stream": {
      "post": {
        "description": "Add a face to a face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.",
        "operationId": "FaceList_AddFaceFromStream",
        "parameters": [
          {
            "$ref": "#/parameters/faceListId"
          },
          {
            "$ref": "#/parameters/faceUserData"
          },
          {
            "$ref": "#/parameters/targetFace"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageStream"
          }
        ],
        "consumes": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "Add face to face list from stream example": {
            "$ref": "./examples/AddFaceListFaceFromStream.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces?overload=stream": {
      "post": {
        "description": "Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.",
        "operationId": "LargePersonGroupPerson_AddFaceFromStream",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/faceUserData"
          },
          {
            "$ref": "#/parameters/targetFace"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageStream"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Add face to person with stream example": {
            "$ref": "./examples/AddLargePersonGroupPersonFaceFromStream.json"
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}/persistedfaces?overload=stream": {
      "post": {
        "description": "Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.",
        "operationId": "LargeFaceList_AddFaceFromStream",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          },
          {
            "$ref": "#/parameters/faceUserData"
          },
          {
            "$ref": "#/parameters/targetFace"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageStream"
          }
        ],
        "consumes": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "Add face to large face list from stream example": {
            "$ref": "./examples/AddLargeFaceListFaceFromStream.json"
          }
        }
      }
    }
  },
  "definitions": {
    "APIError": {
      "type": "object",
      "description": "Error information returned by the API",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        }
      }
    },
    "Error": {
      "type": "object",
      "description": "Error body.",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "DetectedFaces": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DetectedFace"
      }
    },
    "DetectedFace": {
      "type": "object",
      "required": [
        "faceRectangle"
      ],
      "description": "Detected Face object.",
      "properties": {
        "faceId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique faceId of the detected face, created by detection API and it will expire 24 hours after the detection call. To return this, it requires \"returnFaceId\" parameter to be true."
        },
        "faceRectangle": {
          "$ref": "#/definitions/FaceRectangle"
        },
        "faceLandmarks": {
          "$ref": "#/definitions/FaceLandmarks"
        },
        "faceAttributes": {
          "$ref": "#/definitions/FaceAttributes"
        }
      }
    },
    "FaceRectangle": {
      "type": "object",
      "required": [
        "width",
        "height",
        "left",
        "top"
      ],
      "description": "A rectangle area for the face location on image.",
      "properties": {
        "width": {
          "type": "integer",
          "format": "int32",
          "description": "The width of the rectangle, in pixels."
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The height of the rectangle, in pixels."
        },
        "left": {
          "type": "integer",
          "format": "int32",
          "description": "The distance from the left edge if the image to the left edge of the rectangle, in pixels."
        },
        "top": {
          "type": "integer",
          "format": "int32",
          "description": "The distance from the top edge if the image to the top edge of the rectangle, in pixels."
        }
      }
    },
    "Coordinate": {
      "type": "object",
      "required": [
        "x",
        "y"
      ],
      "description": "Coordinates within an image",
      "properties": {
        "x": {
          "type": "number",
          "description": "The horizontal component, in pixels."
        },
        "y": {
          "type": "number",
          "description": "The vertical component, in pixels."
        }
      }
    },
    "FaceLandmarks": {
      "type": "object",
      "description": "An array of 27-point face landmarks pointing to the important positions of face components. To return this, it requires \"returnFaceLandmarks\" parameter to be true.",
      "properties": {
        "pupilLeft": {
          "$ref": "#/definitions/Coordinate"
        },
        "pupilRight": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseTip": {
          "$ref": "#/definitions/Coordinate"
        },
        "mouthLeft": {
          "$ref": "#/definitions/Coordinate"
        },
        "mouthRight": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyebrowLeftOuter": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyebrowLeftInner": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeLeftOuter": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeLeftTop": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeLeftBottom": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeLeftInner": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyebrowRightInner": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyebrowRightOuter": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeRightInner": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeRightTop": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeRightBottom": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeRightOuter": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseRootLeft": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseRootRight": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseLeftAlarTop": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseRightAlarTop": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseLeftAlarOutTip": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseRightAlarOutTip": {
          "$ref": "#/definitions/Coordinate"
        },
        "upperLipTop": {
          "$ref": "#/definitions/Coordinate"
        },
        "upperLipBottom": {
          "$ref": "#/definitions/Coordinate"
        },
        "underLipTop": {
          "$ref": "#/definitions/Coordinate"
        },
        "underLipBottom": {
          "$ref": "#/definitions/Coordinate"
        }
      }
    },
    "FaceAttributes": {
      "type": "object",
      "description": "Face Attributes",
      "properties": {
        "age": {
          "type": "number",
          "description": "An estimated \"visual age\" number in years. It is how old a person looks like rather than the actual biological age."
        },
        "gender": {
          "type": "string",
          "description": "Male or female.",
          "x-ms-enum": {
            "name": "Gender",
            "modelAsString": false
          },
          "enum": [
            "male",
            "female",
            "genderless"
          ]
        },
        "smile": {
          "description": "Smile intensity, a number between [0,1].",
          "$ref": "#/definitions/Level"
        },
        "facialHair": {
          "description": "Properties describing facial hair attributes.",
          "$ref": "#/definitions/FacialHair"
        },
        "glasses": {
          "type": "string",
          "description": "Glasses type. Values include 'NoGlasses', 'ReadingGlasses', 'Sunglasses', 'SwimmingGoggles'.",
          "x-ms-enum": {
            "name": "GlassesType",
            "modelAsString": false
          },
          "enum": [
            "noGlasses",
            "readingGlasses",
            "sunglasses",
            "swimmingGoggles"
          ]
        },
        "headPose": {
          "description": "Properties indicating head pose of the face.",
          "$ref": "#/definitions/HeadPose"
        },
        "emotion": {
          "description": "Properties describing facial emotion in form of confidence ranging from 0 to 1.",
          "$ref": "#/definitions/Emotion"
        },
        "hair": {
          "description": "Properties describing hair attributes.",
          "$ref": "#/definitions/Hair"
        },
        "makeup": {
          "description": "Properties describing present makeups on a given face.",
          "$ref": "#/definitions/Makeup"
        },
        "occlusion": {
          "description": "Properties describing occlusions on a given face.",
          "$ref": "#/definitions/Occlusion"
        },
        "accessories": {
          "description": "Properties describing any accessories on a given face.",
          "$ref": "#/definitions/Accessories"
        },
        "blur": {
          "description": "Properties describing any presence of blur within the image.",
          "$ref": "#/definitions/Blur"
        },
        "exposure": {
          "description": "Properties describing exposure level of the image.",
          "$ref": "#/definitions/Exposure"
        },
        "noise": {
          "description": "Properties describing noise level of the image.",
          "$ref": "#/definitions/Noise"
        }
      }
    },
    "FacialHair": {
      "type": "object",
      "description": "Return lengths in three facial hair areas: moustache, beard and sideburns. The length is a number between [0,1]. 0 for no facial hair in this area, 1 for long or very thick facial hairs in this area.",
      "properties": {
        "moustache": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "beard": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "sideburns": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "HeadPose": {
      "type": "object",
      "description": "3-D roll/yaw/pitch angles for face direction. Note, Pitch value is a reserved field and will always return 0.",
      "properties": {
        "roll": {
          "type": "number",
          "x-nullable": false
        },
        "yaw": {
          "type": "number",
          "x-nullable": false
        },
        "pitch": {
          "type": "number",
          "x-nullable": false
        }
      }
    },
    "Emotion": {
      "type": "object",
      "description": "Emotion intensity, including neutral, anger, contempt, disgust, fear, happiness, sadness and surprise.",
      "properties": {
        "anger": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "contempt": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "disgust": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "fear": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "happiness": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "neutral": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "sadness": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "surprise": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "Hair": {
      "type": "object",
      "description": "Group of hair values indicating whether the hair is visible, bald, and hair color if hair is visible.",
      "properties": {
        "bald": {
          "description": "A number describing confidence level of whether the person is bald.",
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "invisible": {
          "type": "boolean",
          "description": "A boolean value describing whether the hair is visible in the image.",
          "x-nullable": false
        },
        "hairColor": {
          "description": "An array of candidate colors and confidence level in the presence of each.",
          "$ref": "#/definitions/HairColors"
        }
      }
    },
    "HairColors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/HairColor"
      }
    },
    "HairColor": {
      "type": "object",
      "description": "Hair color and associated confidence",
      "properties": {
        "color": {
          "type": "string",
          "description": "Name of the hair color.",
          "x-nullable": false,
          "x-ms-enum": {
            "name": "HairColorType",
            "modelAsString": false
          },
          "enum": [
            "unknown",
            "white",
            "gray",
            "blond",
            "brown",
            "red",
            "black",
            "other"
          ]
        },
        "confidence": {
          "x-nullable": false,
          "description": "Confidence level of the color",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "Makeup": {
      "type": "object",
      "description": "Whether eye, lip areas are made-up or not.",
      "properties": {
        "eyeMakeup": {
          "type": "boolean",
          "description": "A boolean value describing whether eye makeup is present on a face.",
          "x-nullable": false
        },
        "lipMakeup": {
          "type": "boolean",
          "description": "A boolean value describing whether lip makeup is present on a face.",
          "x-nullable": false
        }
      }
    },
    "Occlusion": {
      "type": "object",
      "description": "Properties describing occlusions on a given face.",
      "properties": {
        "foreheadOccluded": {
          "type": "boolean",
          "description": "A boolean value indicating whether forehead is occluded.",
          "x-nullable": false
        },
        "eyeOccluded": {
          "type": "boolean",
          "description": "A boolean value indicating whether eyes are occluded.",
          "x-nullable": false
        },
        "mouthOccluded": {
          "type": "boolean",
          "description": "A boolean value indicating whether the mouth is occluded.",
          "x-nullable": false
        }
      }
    },
    "Accessories": {
      "type": "array",
      "description": "Accessories around face, including 'headwear', 'glasses' and 'mask'. Empty array means no accessories detected. Note this is after a face is detected. Large mask could result in no face to be detected.",
      "items": {
        "$ref": "#/definitions/Accessory"
      }
    },
    "Accessory": {
      "type": "object",
      "description": "Accessory item and corresponding confidence level.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of an accessory",
          "x-nullable": false,
          "x-ms-enum": {
            "name": "AccessoryType",
            "modelAsString": false
          },
          "enum": [
            "headWear",
            "glasses",
            "mask"
          ]
        },
        "confidence": {
          "x-nullable": false,
          "description": "Confidence level of an accessory",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "Blur": {
      "type": "object",
      "description": "Face is blurry or not. Level returns 'Low', 'Medium' or 'High'. Value returns a number between [0,1], the larger the blurrier.",
      "properties": {
        "blurLevel": {
          "type": "string",
          "description": "An enum value indicating level of blurriness.",
          "x-nullable": false,
          "x-ms-enum": {
            "name": "BlurLevel",
            "modelAsString": false
          },
          "enum": [
            "Low",
            "Medium",
            "High"
          ]
        },
        "value": {
          "description": "A number indicating level of blurriness ranging from 0 to 1.",
          "x-nullable": false,
          "$ref": "#/definitions/Level"
        }
      }
    },
    "Exposure": {
      "type": "object",
      "description": "Face exposure level. Level returns 'GoodExposure', 'OverExposure' or 'UnderExposure'.",
      "properties": {
        "exposureLevel": {
          "type": "string",
          "description": "An enum value indicating level of exposure.",
          "x-nullable": false,
          "x-ms-enum": {
            "name": "ExposureLevel",
            "modelAsString": false
          },
          "enum": [
            "UnderExposure",
            "GoodExposure",
            "OverExposure"
          ]
        },
        "value": {
          "description": "A number indicating level of exposure level ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good exposure. [0.75, 1] is over exposure.",
          "x-nullable": false,
          "$ref": "#/definitions/Level"
        }
      }
    },
    "Noise": {
      "type": "object",
      "description": "Noise level of face pixels. Level returns 'Low', 'Medium' and 'High'. Value returns a number between [0,1], the larger the noisier",
      "properties": {
        "noiseLevel": {
          "type": "string",
          "description": "An enum value indicating level of noise.",
          "x-nullable": false,
          "x-ms-enum": {
            "name": "NoiseLevel",
            "modelAsString": false
          },
          "enum": [
            "Low",
            "Medium",
            "High"
          ]
        },
        "value": {
          "description": "A number indicating level of noise level ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good exposure. [0.75, 1] is over exposure. [0, 0.3) is low noise level. [0.3, 0.7) is medium noise level. [0.7, 1] is high noise level.",
          "x-nullable": false,
          "$ref": "#/definitions/Level"
        }
      }
    },
    "FindSimilarRequest": {
      "type": "object",
      "required": [
        "faceId"
      ],
      "description": "Request body for find similar operation.",
      "properties": {
        "faceId": {
          "type": "string",
          "format": "uuid",
          "description": "FaceId of the query face. User needs to call [Face - Detect](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236) first to get a valid faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call."
        },
        "faceListId": {
          "type": "string",
          "description": "An existing user-specified unique candidate face list, created in [FaceList - Create](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b) a Face List. Face list contains a set of persistedFaceIds which are persisted and will never expire. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        },
        "largeFaceListId": {
          "type": "string",
          "description": "An existing user-specified unique candidate large face list, created in [LargeFaceList - Create](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc). Large face list contains a set of persistedFaceIds which are persisted and will never expire. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        },
        "faceIds": {
          "type": "array",
          "description": "An array of candidate faceIds. All of them are created by [Face - Detect](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236) and the faceIds will expire 24 hours after the detection call. The number of faceIds is limited to 1000. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.",
          "maxItems": 1000,
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "maxNumOfCandidatesReturned": {
          "type": "integer",
          "description": "Optional parameter. \nThe number of top similar faces returned. \nThe valid range is [1, 1000].It defaults to 20. \n",
          "default": 20,
          "minimum": 1,
          "maximum": 1000
        },
        "mode": {
          "type": "string",
          "description": "Optional parameter. \nSimilar face searching mode. It can be \"matchPerson\" or \"matchFace\". It defaults to \"matchPerson\".\n",
          "default": "matchPerson",
          "x-nullable": false,
          "x-ms-enum": {
            "name": "FindSimilarMatchMode",
            "modelAsString": false
          },
          "enum": [
            "matchPerson",
            "matchFace"
          ]
        }
      }
    },
    "SimilarFaces": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SimilarFace"
      }
    },
    "SimilarFace": {
      "type": "object",
      "required": [
        "confidence"
      ],
      "description": "Response body for find similar face operation.",
      "properties": {
        "faceId": {
          "type": "string",
          "format": "uuid",
          "description": "FaceId of candidate face when find by faceIds. faceId is created by [Face - Detect](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236) and will expire 24 hours after the detection call"
        },
        "persistedFaceId": {
          "type": "string",
          "format": "uuid",
          "description": "PersistedFaceId of candidate face when find by faceListId or largeFaceListId. persistedFaceId in face list/large face list is persisted and will not expire. As showed in below response."
        },
        "confidence": {
          "description": "Similarity confidence of the candidate face. The higher confidence, the more similar. Range between [0,1].",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "GroupRequest": {
      "type": "object",
      "required": [
        "faceIds"
      ],
      "description": "Request body for group request.",
      "properties": {
        "faceIds": {
          "type": "array",
          "description": "Array of candidate faceId created by [Face - Detect](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236). The maximum is 1000 faces",
          "maxItems": 1000,
          "items": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          }
        }
      }
    },
    "GroupResult": {
      "type": "object",
      "required": [
        "groups"
      ],
      "description": "An array of face groups based on face similarity.",
      "properties": {
        "groups": {
          "type": "array",
          "description": "A partition of the original faces based on face similarity. Groups are ranked by number of faces",
          "items": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            }
          }
        },
        "messyGroup": {
          "type": "array",
          "description": "Face ids array of faces that cannot find any similar faces from original faces.",
          "items": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          }
        }
      }
    },
    "IdentifyRequest": {
      "type": "object",
      "required": [
        "faceIds"
      ],
      "description": "Request body for identify face operation.",
      "properties": {
        "faceIds": {
          "type": "array",
          "description": "Array of query faces faceIds, created by the [Face - Detect](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236). Each of the faces are identified independently. The valid number of faceIds is between [1, 10].",
          "maxItems": 10,
          "items": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          }
        },
        "personGroupId": {
          "description": "PersonGroupId of the target person group, created by [PersonGroup - Create](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244). Parameter personGroupId and largePersonGroupId should not be provided at the same time.",
          "type": "string",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        },
        "largePersonGroupId": {
          "description": "LargePersonGroupId of the target large person group, created by [LargePersonGroup - Create](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d). Parameter personGroupId and largePersonGroupId should not be provided at the same time.",
          "type": "string",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        },
        "maxNumOfCandidatesReturned": {
          "type": "integer",
          "description": "The range of maxNumOfCandidatesReturned is between 1 and 100 (default is 10).",
          "default": 10,
          "minimum": 1,
          "maximum": 100
        },
        "confidenceThreshold": {
          "description": "Customized identification confidence threshold, in the range of [0, 1]. Advanced user can tweak this value to override default internal threshold for better precision on their scenario data. Note there is no guarantee of this threshold value working on other data and after algorithm updates.",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "IdentifyResults": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/IdentifyResult"
      }
    },
    "IdentifyResult": {
      "type": "object",
      "required": [
        "faceId",
        "candidates"
      ],
      "description": "Response body for identify face operation.",
      "properties": {
        "faceId": {
          "type": "string",
          "format": "uuid",
          "description": "FaceId of the query face"
        },
        "candidates": {
          "type": "array",
          "description": "Identified person candidates for that face (ranked by confidence). Array size should be no larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty array.",
          "items": {
            "$ref": "#/definitions/IdentifyCandidate"
          }
        }
      }
    },
    "IdentifyCandidate": {
      "type": "object",
      "required": [
        "personId",
        "confidence"
      ],
      "description": "All possible faces that may qualify.",
      "properties": {
        "personId": {
          "type": "string",
          "format": "uuid",
          "description": "PersonId of candidate person."
        },
        "confidence": {
          "description": "A float number between 0.0 and 1.0.",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "VerifyFaceToPersonRequest": {
      "type": "object",
      "required": [
        "faceId",
        "personId"
      ],
      "description": "Request body for face to person verification.",
      "properties": {
        "faceId": {
          "type": "string",
          "format": "uuid",
          "description": "FaceId of the face, comes from [Face - Detect](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236)."
        },
        "personGroupId": {
          "description": "Using existing personGroupId and personId for fast loading a specified person. personGroupId is created in [PersonGroup - Create](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244). Parameter personGroupId and largePersonGroupId should not be provided at the same time.",
          "type": "string",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        },
        "largePersonGroupId": {
          "description": "Using existing largePersonGroupId and personId for fast loading a specified person. largePersonGroupId is created in [LargePersonGroup - Create](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d). Parameter personGroupId and largePersonGroupId should not be provided at the same time.",
          "type": "string",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        },
        "personId": {
          "type": "string",
          "format": "uuid",
          "description": "Specify a certain person in a person group or a large person group. personId is created in [PersonGroup Person - Create](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c) or [LargePersonGroup Person - Create](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40)."
        }
      }
    },
    "VerifyFaceToFaceRequest": {
      "type": "object",
      "required": [
        "faceId1",
        "faceId2"
      ],
      "description": "Request body for face to face verification.",
      "properties": {
        "faceId1": {
          "type": "string",
          "format": "uuid",
          "description": "FaceId of one face, comes from [Face - Detect](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236)."
        },
        "faceId2": {
          "type": "string",
          "format": "uuid",
          "description": "FaceId of another face, comes from [Face - Detect](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236)."
        }
      }
    },
    "VerifyResult": {
      "type": "object",
      "required": [
        "isIdentical",
        "confidence"
      ],
      "description": "Result of the verify operation.",
      "properties": {
        "isIdentical": {
          "type": "boolean",
          "description": "True if the two faces belong to the same person or the face belongs to the person, otherwise false."
        },
        "confidence": {
          "description": "A number indicates the similarity confidence of whether two faces belong to the same person, or whether the face belongs to the person. By default, isIdentical is set to True if similarity confidence is greater than or equal to 0.5. This is useful for advanced users to override \"isIdentical\" and fine-tune the result on their own data.",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "FaceList": {
      "description": "Face list object.",
      "type": "object",
      "required": [
        "faceListId"
      ],
      "properties": {
        "faceListId": {
          "type": "string",
          "description": "FaceListId of the target face list.",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        },
        "persistedFaces": {
          "description": "Faces in the face list.",
          "$ref": "#/definitions/PersistedFaces"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NameAndUserDataContract"
        }
      ]
    },
    "FaceLists": {
      "type": "array",
      "description": "An array of face list results, with fields of faceListId, name and userData",
      "items": {
        "$ref": "#/definitions/FaceList"
      }
    },
    "PersonGroup": {
      "type": "object",
      "required": [
        "personGroupId"
      ],
      "description": "Person group object.",
      "properties": {
        "personGroupId": {
          "description": "PersonGroupId of the existing person groups, created in [PersonGroup - Create](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244).",
          "type": "string",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NameAndUserDataContract"
        }
      ]
    },
    "PersonGroups": {
      "type": "array",
      "description": "An array of person groups.",
      "items": {
        "$ref": "#/definitions/PersonGroup"
      }
    },
    "Person": {
      "type": "object",
      "required": [
        "personId"
      ],
      "description": "Person object.",
      "properties": {
        "personId": {
          "type": "string",
          "format": "uuid",
          "description": "PersonId of the retrieved person."
        },
        "persistedFaceIds": {
          "type": "array",
          "description": "PersistedFaceIds of registered faces in the person.",
          "items": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NameAndUserDataContract"
        }
      ]
    },
    "Persons": {
      "type": "array",
      "description": "An array of Persons.",
      "items": {
        "$ref": "#/definitions/Person"
      }
    },
    "PersistedFace": {
      "type": "object",
      "required": [
        "persistedFaceId"
      ],
      "description": "PersonFace object.",
      "properties": {
        "persistedFaceId": {
          "type": "string",
          "format": "uuid",
          "description": "PersistedFaceId of the added face, which is persisted and will not expire. Different from faceId which is created in [Face - Detect](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236) and will expire in 24 hours after the detection call."
        },
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The size limit is 1KB.",
          "maxLength": 1024
        }
      }
    },
    "PersistedFaces": {
      "type": "array",
      "description": "An array of persisted faces within the face list or large face list.",
      "items": {
        "$ref": "#/definitions/PersistedFace"
      }
    },
    "LargeFaceList": {
      "description": "Large face list object.",
      "type": "object",
      "required": [
        "largeFaceListId"
      ],
      "properties": {
        "largeFaceListId": {
          "type": "string",
          "description": "LargeFaceListId of the existing large face lists, created in [LargeFaceList - Create](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc).",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NameAndUserDataContract"
        }
      ]
    },
    "LargeFaceLists": {
      "type": "array",
      "description": "An array of large face list results, with fields of largeFaceListId, name and userData",
      "items": {
        "$ref": "#/definitions/LargeFaceList"
      }
    },
    "LargePersonGroup": {
      "type": "object",
      "required": [
        "largePersonGroupId"
      ],
      "description": "Large person group object.",
      "properties": {
        "largePersonGroupId": {
          "description": "LargePersonGroupId of the existing large person groups, created in [LargePersonGroup - Create](https://westus.dev.cognitive.microsoft.com/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).",
          "type": "string",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NameAndUserDataContract"
        }
      ]
    },
    "LargePersonGroups": {
      "type": "array",
      "description": "An array of large person groups.",
      "items": {
        "$ref": "#/definitions/LargePersonGroup"
      }
    },
    "UpdateFaceRequest": {
      "type": "object",
      "description": "Request to update face data.",
      "properties": {
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The size limit is 1KB.",
          "maxLength": 1024
        }
      }
    },
    "TrainingStatus": {
      "type": "object",
      "required": [
        "status",
        "createdDateTime"
      ],
      "description": "Training status object.",
      "properties": {
        "status": {
          "type": "string",
          "description": "Training status: notstarted, running, succeeded, failed. If the person group or large person group or large face list has never been trained before, the status is notstarted. If the training is ongoing, the status is running. Status succeed means this person group or large person group is ready for Face - Identify, or this large face list is ready for Face - Find Similar. Status failed is often caused by no person or no persisted face exist in the person group or large person group, or no persisted face exist in the large face list.",
          "x-ms-enum": {
            "name": "TrainingStatusType",
            "modelAsString": false
          },
          "enum": [
            "nonstarted",
            "running",
            "succeeded",
            "failed"
          ]
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "A combined UTC date and time string that describes the last time when the large person group or person group or large face list is requested to train. E.g. 2018-10-15T11:51:27.6872495Z.",
          "x-ms-client-name": "created"
        },
        "lastActionDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "A combined UTC date and time string that describes the last time the large person group or person group or large face list's training status was modifed. E.g. 2018-10-15T11:51:27.8705696Z.",
          "x-ms-client-name": "lastAction"
        },
        "lastSuccessfulTrainingDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "A combined UTC date and time string that describes the large person group or person group or large face list's last successful training time. E.g. 2018-10-15T11:51:27.8705696Z.",
          "x-ms-client-name": "lastSuccessfulTraining"
        },
        "message": {
          "type": "string",
          "description": "Show failure message when training failed (omitted when training succeed)."
        }
      }
    },
    "Confidence": {
      "description": "A number ranging from 0 to 1 indicating a level of confidence associated with a property.",
      "type": "number",
      "minimum": 0,
      "maximum": 1
    },
    "Level": {
      "description": "A number ranging from 0 to 1 indicating the intensity level associated with a property.",
      "type": "number",
      "minimum": 0,
      "maximum": 1
    },
    "NameAndUserDataContract": {
      "type": "object",
      "description": "A combination of user defined name and user specified data for the person, largePersonGroup/personGroup, and largeFaceList/faceList.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128.",
          "maxLength": 128
        },
        "userData": {
          "type": "string",
          "description": "User specified data. Length should not exceed 16KB.",
          "maxLength": 16384
        }
      }
    }
  },
  "parameters": {
    "returnFaceAttributes": {
      "name": "returnFaceAttributes",
      "in": "query",
      "description": "Analyze and return the one or more specified face attributes in the comma-separated string like \"returnFaceAttributes=age,gender\".",
      "type": "array",
      "x-ms-parameter-location": "method",
      "required": false,
      "collectionFormat": "csv",
      "items": {
        "type": "string",
        "x-nullable": false,
        "x-ms-enum": {
          "name": "FaceAttributeType",
          "modelAsString": false
        },
        "enum": [
          "age",
          "gender",
          "headPose",
          "smile",
          "facialHair",
          "glasses",
          "emotion",
          "hair",
          "makeup",
          "occlusion",
          "accessories",
          "blur",
          "exposure",
          "noise"
        ]
      }
    },
    "targetFace": {
      "name": "targetFace",
      "in": "query",
      "description": "A face rectangle to specify the target face to be added to a person in the format of \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.",
      "type": "array",
      "x-ms-parameter-location": "method",
      "required": false,
      "collectionFormat": "csv",
      "items": {
        "type": "integer",
        "format": "int32",
        "x-nullable": false,
        "maxItems": 4,
        "minItems": 4
      }
    },
    "faceUserData": {
      "name": "userData",
      "in": "query",
      "description": "User-specified data about the face for any purpose. The maximum length is 1KB.",
      "type": "string",
      "maxLength": 1024,
      "x-ms-parameter-location": "method",
      "required": false,
      "collectionFormat": "csv"
    },
    "faceListId": {
      "name": "faceListId",
      "in": "path",
      "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "collectionFormat": "csv",
      "maxLength": 64,
      "pattern": "^[a-z0-9-_]+$"
    },
    "personGroupId": {
      "name": "personGroupId",
      "in": "path",
      "description": "User-provided personGroupId as a string. The valid characters include numbers, English letters in lower case, '-' and '_'. The maximum length of the personGroupId is 64.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "collectionFormat": "csv",
      "maxLength": 64,
      "pattern": "^[a-z0-9-_]+$"
    },
    "largeFaceListId": {
      "name": "largeFaceListId",
      "in": "path",
      "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "collectionFormat": "csv",
      "maxLength": 64,
      "pattern": "^[a-z0-9-_]+$"
    },
    "largePersonGroupId": {
      "name": "largePersonGroupId",
      "in": "path",
      "description": "User-provided largePersonGroupId as a string. The valid characters include numbers, English letters in lower case, '-' and '_'. The maximum length of the largePersonGroupId is 64.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "collectionFormat": "csv",
      "maxLength": 64,
      "pattern": "^[a-z0-9-_]+$"
    },
    "personId": {
      "name": "personId",
      "in": "path",
      "description": "PersonId of the target person.",
      "required": true,
      "type": "string",
      "format": "uuid",
      "x-ms-parameter-location": "method",
      "collectionFormat": "csv"
    },
    "persistedFaceId": {
      "name": "persistedFaceId",
      "in": "path",
      "description": "PersistedFaceId of an existing face. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
      "required": true,
      "type": "string",
      "format": "uuid",
      "x-ms-parameter-location": "method",
      "collectionFormat": "csv"
    },
    "Endpoint": {
      "name": "Endpoint",
      "description": "Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).",
      "x-ms-parameter-location": "client",
      "required": true,
      "type": "string",
      "in": "path",
      "x-ms-skip-url-encoding": true
    }
  }
}